<?php

namespace tests;

use entities\EmailService;
use entities\Item;
use InvalidArgumentException;
use PHPUnit\Framework\TestCase;
use entities\ToDoList;

require 'entities/ToDoList.php';
require 'entities/EmailService.php';

class TodoListTest extends TestCase
{
    private $emailServiceMock;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->emailServiceMock = $this->createMock(EmailService::class);
        $this->emailServiceMock->method('sendEmail')
            ->willReturn(true);
    }

    public function testIsValidTodoList(): void
    {
        $toDoList = new ToDoList(1, 1, $this->emailServiceMock);
        $this->assertTrue($toDoList->isValidToDoList());
    }

    public function testAddItemInLessThanThirtyMinutes(): void
    {
        $this->expectException(InvalidArgumentException::class);

        $item = new Item(
            'test',
            'test',
            new \DateTime('now'),
        );
        $toDoList = new ToDoList('1', '1', $this->emailServiceMock);

        $toDoList->addItem($item);
        $newItem = new Item(
            'test 2',
            'test',
            new \DateTime('now'),
        );
        $toDoList->addItem($newItem);
    }

    public function testAddItemInMoreThanThirtyMinutes(): void
    {
        $item = new Item(
            'test',
            'test',
            new \DateTime('now - 40 minutes'),
        );
        $toDoList = new ToDoList('2', '2', $this->emailServiceMock);

        $toDoList->addItem($item);
        $newItem = new Item(
            'test 2',
            'test',
            new \DateTime('now'),
        );
        $toDoList->addItem($newItem);
        $this->assertTrue($toDoList->isValidToDoList());
    }

    public function testMailSend(): void
    {
        $toDoList = new ToDoList('3', '3', $this->emailServiceMock);
        for ($i=1; $i<=10;$i++) {
            $minutes = 40 * $i;
            $item = new Item(
                'test'.$i,
                'test',
                new \DateTime('now - '.$minutes.' minutes '),
            );
            $toDoList->addItem($item);
        }
        $this->assertTrue($toDoList->isValidToDoList());
    }

    public function testNameAlreadyExistsInItems(): void
    {
        $this->expectException(InvalidArgumentException::class);

        $item = new Item(
            'test',
            'test',
            new \DateTime('now - 40 minutes'),
        );
        $toDoList = new ToDoList('4', '4', $this->emailServiceMock);

        $toDoList->addItem($item);
        $newItem = new Item(
            'test',
            'test',
            new \DateTime('now'),
        );
        $toDoList->addItem($newItem);
    }
}